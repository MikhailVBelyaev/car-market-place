apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/postgres:latest
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django
spec:
  replicas: 2
  selector:
    matchLabels:
      app: django
  template:
    metadata:
      labels:
        app: django
    spec:
      containers:
      - name: django
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/django:latest
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: django
spec:
  selector:
    app: django
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/frontend:latest
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  annotations:
    cloud.google.com/backend-config: '{"default": "frontend-backendconfig"}'
spec:
  selector:
    app: frontend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tg-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tg-bot
  template:
    metadata:
      labels:
        app: tg-bot
    spec:
      containers:
      - name: tg-bot
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/tg_bot:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scraper
  template:
    metadata:
      labels:
        app: scraper
    spec:
      containers:
      - name: scraper
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/scraper:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: extract-data
spec:
  replicas: 1
  selector:
    matchLabels:
      app: extract-data
  template:
    metadata:
      labels:
        app: extract-data
    spec:
      containers:
      - name: extract-data
        image: us-central1-docker.pkg.dev/car-market-place-1231/car-marketplace-repo/extract-data:latest
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: car-marketplace-ingress
  annotations: {}
spec:
  ingressClassName: gce
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port:
                number: 80
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: django
              port:
                number: 8000
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: frontend-backendconfig
spec:
  healthCheck:
    requestPath: /healthz
    port: 80
